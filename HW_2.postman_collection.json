{
	"info": {
		"_postman_id": "512ba6c3-4319-40ac-93b8-38afe52388e4",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26187989"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// body ответа в текст и в переменную\r",
							"var resp_txt = pm.response.text();\r",
							"console.log(resp_txt);\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(resp_txt);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var resp_body = pm.response.json();\r",
							"// console.log(\"Resp_body =\", resp_body);\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Resp_name_match_manual\", function () {\r",
							"    pm.expect(resp_body.name).to.include(\"Dmitry\");\r",
							"});\r",
							"// console.log(\"resp_body.name =\", resp_body.name);\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Resp_age_match_manual\", function () {\r",
							"        pm.expect(+resp_body.age).to.eql(35);\r",
							"});\r",
							"// console.log(\"Resp_body.age =\", +resp_body.age);\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Resp_salary_match_manual\", function () {\r",
							"        pm.expect(resp_body.salary).to.eql(45000);\r",
							"});\r",
							"// console.log(\"Resp_body.salary =\", resp_body.salary);\r",
							"\r",
							"// 7. Спарсить request.\r",
							"var pars_req = request.data\r",
							"// console.log(pars_req);\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Resp_name_match_auto\", function () {\r",
							"    pm.expect(resp_body.name).to.include(pars_req.name);\r",
							"});\r",
							"// console.log(\"Resp_body.name =\", resp_body.name);\r",
							"// console.log(\"Pars_req.name =\", pars_req.name);\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Resp_age_match_auto\", function () {\r",
							"     pm.expect(+resp_body.age).to.eql(+pars_req.age);\r",
							"});\r",
							"// console.log(\"Resp_body.age =\", +resp_body.age);\r",
							"// console.log(\"Pars_req.age =\", +pars_req.age);\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Resp_salary_match_auto\", function () {\r",
							"     pm.expect(resp_body.salary).to.eql(+pars_req.salary);\r",
							"});\r",
							"// console.log(\"Resp_body.salary =\", resp_body.salary);\r",
							"// console.log(\"Pars_req.salary =\", +pars_req.salary);\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(resp_body.family);\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Resp_salarybig_match_auto\", function () {\r",
							"     pm.expect(resp_body.family.u_salary_1_5_year).to.eql(pars_req.salary*4);\r",
							"});\r",
							"// console.log(\"Resp_body.family.u_salary_1_5_year =\", resp_body.family.u_salary_1_5_year);\r",
							"// console.log(\"Pars_req.salary*4 =\", pars_req.salary*4);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Dmitry",
							"type": "text"
						},
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "45000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var resp_body = pm.response.json();\r",
							"// console.log(\"Resp_body =\", resp_body);\r",
							"\r",
							"// 4. Спарсить request.\r",
							"var pars_req = pm.request.url.query.toObject();\r",
							"// console.log(\"Pars_req =\", pars_req);\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Resp_name_match_manual\", function () {\r",
							"    pm.expect(resp_body.name).to.include(pars_req.name);\r",
							"});\r",
							"// console.log(\"Resp_body.name =\", resp_body.name);\r",
							"// console.log(\"Pars_req.name =\", pars_req.name);\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Resp_age_match_auto\", function () {\r",
							"     pm.expect(+resp_body.age).to.eql(+pars_req.age);\r",
							"});\r",
							"// console.log(\"Resp_body.age =\", +resp_body.age);\r",
							"// console.log(\"Pars_req.age =\", +pars_req.age);\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Resp_salary_match_auto\", function () {\r",
							"     pm.expect(resp_body.salary).to.eql(+pars_req.salary);\r",
							"});\r",
							"// console.log(\"Resp_body.salary =\", resp_body.salary);\r",
							"// console.log(\"Pars_req.salary =\", +pars_req.salary);\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"// console.log(resp_body.family);\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog_have_name\", function () {\r",
							"    pm.expect(resp_body.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"// console.log(resp_body.family.pets.dog);\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog_have_age\", function () {\r",
							"    pm.expect(resp_body.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Name_eq_Luky\", function () {\r",
							"     pm.expect(resp_body.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Age_eq_4\", function () {\r",
							"     pm.expect(resp_body.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Dmitry&age=35&salary=45000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Dmitry"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "45000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var resp_body = pm.response.json();\r",
							"// console.log(\"Resp_body =\", resp_body);\r",
							"\r",
							"// 4. Спарсить request.\r",
							"var pars_req = pm.request.url.query.toObject();\r",
							"// console.log(\"Pars_req =\", pars_req);\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Resp_name_match_manual\", function () {\r",
							"    pm.expect(resp_body.name).to.include(pars_req.name);\r",
							"});\r",
							"// console.log(\"Resp_body.name =\", resp_body.name);\r",
							"// console.log(\"Pars_req.name =\", pars_req.name);\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Resp_age_match_auto\", function () {\r",
							"     pm.expect(+resp_body.age).to.eql(+pars_req.age);\r",
							"});\r",
							"// console.log(\"Resp_body.age =\", +resp_body.age);\r",
							"console.log(\"Pars_req.age =\", +pars_req.age);\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(+pars_req.salary);\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(resp_body.salary);\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(resp_body.salary[0]);\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp_body.salary[1]);\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp_body.salary[2]);\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Resp_salary0_match_auto\", function () {\r",
							"     pm.expect(+pars_req.salary).to.eql(resp_body.salary[0]);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Resp_salary1_match_auto\", function () {\r",
							"     pm.expect(+pars_req.salary*2).to.eql(+resp_body.salary[1]);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Resp_salary2_match_auto\", function () {\r",
							"     pm.expect(+pars_req.salary*3).to.eql(+resp_body.salary[2]);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", \"Dmitry\");\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", 35);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", 45000);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (let i = 0; i <= resp_body.salary.length-1; i++) {\r",
							"\tconsole.log(resp_body.salary[i]);\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Dmitry&age=35&salary=45000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Dmitry"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "45000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"var resp_body = pm.response.json();\r",
							"// console.log(\"Resp_body =\", resp_body);\r",
							"\r",
							"// 7. Спарсить request.\r",
							"var pars_req = request.data;\r",
							"// console.log(\"Pars_req =\", pars_req);\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Resp_start_qa_exist\", function () {\r",
							"    pm.expect(resp_body).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Resp_qa_salary_after_6_exist\", function () {\r",
							"    pm.expect(resp_body).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Resp_qa_salary_after_12_exist\", function () {\r",
							"    pm.expect(resp_body).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Resp_qa_salary_after_1.5_exist\", function () {\r",
							"    pm.expect(resp_body).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Resp_qa_salary_after_3.5_exist\", function () {\r",
							"    pm.expect(resp_body).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Resp_person_exist\", function () {\r",
							"    pm.expect(resp_body).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Resp_salary_match_auto\", function () {\r",
							"     pm.expect(+resp_body.start_qa_salary).to.eql(+pars_req.salary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Resp_salary_after_6_match_auto\", function () {\r",
							"     pm.expect(+resp_body.qa_salary_after_6_months).to.eql(+pars_req.salary*2);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Resp_salary_after_12_match_auto\", function () {\r",
							"     pm.expect(+resp_body.qa_salary_after_12_months).to.eql(+pars_req.salary*2.7);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Resp_salary_after_1.5_match_auto\", function () {\r",
							"     pm.expect(+resp_body['qa_salary_after_1.5_year']).to.eql(+pars_req.salary*3.3);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Resp_salary_after_3.5_match_auto\", function () {\r",
							"     pm.expect(+resp_body['qa_salary_after_3.5_years']).to.eql(+pars_req.salary*3.8);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Resp_u_name_salary_match_auto\", function () {\r",
							"     pm.expect(+resp_body.person.u_name[1]).to.eql(+pars_req.salary);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Resp_u_name_salary_match_auto\", function () {\r",
							"     pm.expect(+resp_body.person.u_age).to.eql(+pars_req.age);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Resp_u_salary_5_years_match_auto\", function () {\r",
							"     pm.expect(+resp_body.person.u_salary_5_years).to.eql(+pars_req.salary*4.2);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (key in resp_body.person) {\r",
							"    console.log(key, resp_body.person[key]);\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}